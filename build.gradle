plugins {
	id 'maven-publish'
	alias libs.plugins.quilt.loom
}

base.archivesName = project.archives_base_name
version = "${project.version}+${libs.versions.minecraft.get()}"
group = project.maven_group

loom {
	accessWidenerPath = file('src/main/resources/malum.accesswidener')
	runs {
		datagen {
			inherit client

			name 'Minecraft Data'
			vmArg '-Dfabric-api.datagen'
			vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
			//vmArg "-Dfabric-api.datagen.modid=${project.archives_base_name}"

			runDir 'build/datagen'
		}
	}
}

sourceSets.main.resources.srcDirs += ['src/main/generated']

repositories {
	maven {
		name = 'Ladysnake Mods'
		url = 'https://maven.ladysnake.org/releases'
		content {
			includeGroup 'io.github.ladysnake'
			includeGroup 'org.ladysnake'
			includeGroupByRegex 'dev\\.onyxstudios.*'
		}
	}
	maven {
		url = 'https://api.modrinth.com/maven'
		content {
			includeGroup 'maven.modrinth'
		}
	}
	maven { url = 'https://maven.jamieswhiteshirt.com/libs-release' }
	maven { url = 'https://maven.quiltmc.org/repository/release' }
	maven { url = 'https://maven.terraformersmc.com/' }
	maven { url = 'https://mvn.devos.one/releases' }
	maven { url = 'https://mvn.devos.one/snapshots' }
	maven { url = 'https://jitpack.io' }
	mavenCentral()
	mavenLocal()
}

// All the dependencies are declared at gradle/libs.version.toml and referenced with "libs.<id>"
// See https://docs.gradle.org/current/userguide/platforms.html for information on how version catalogs work.
dependencies {
	minecraft libs.minecraft
	mappings variantOf(libs.quilt.mappings) { classifier 'intermediary-v2' }
	modImplementation libs.quilt.loader
	modImplementation libs.quilted.fabric.api

	modImplementation include(libs.cca.base.get()) {
		exclude group: 'net.fabricmc'
		exclude group: 'net.fabricmc.fabric-api'
	}

	modImplementation include(libs.cca.entity.get()) {
		exclude group: 'net.fabricmc'
		exclude group: 'net.fabricmc.fabric-api'
	}

	modImplementation include(libs.cca.world.get()) {
		exclude group: 'net.fabricmc'
		exclude group: 'net.fabricmc.fabric-api'
	}

	modCompileOnly "dev.emi:emi-fabric:${libs.versions.emi.get()}:api" // todo: wrong
	modLocalRuntime libs.emi

	modImplementation include(libs.fabric.asm.get())
	modImplementation include(libs.lodestone.get())
	modImplementation include(libs.midnightlib.get())
	modImplementation include(libs.porting.lib.get())
	modImplementation include(libs.reach.entity.attributes.get())

	modImplementation(libs.trinkets.get()) {
		exclude group: 'net.fabricmc'
		exclude group: 'net.fabricmc.fabric-api'
		exclude group: 'com.terraformersmc'
	}

	runtimeOnly libs.joml
	implementation include(libs.mixin.extras.get())
	include libs.satin
	modRuntimeOnly libs.sodium
}

processResources {
	inputs.property 'version', version

	filesMatching('quilt.mod.json') {
		expand 'version': version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = 'UTF-8'
	it.options.release = 17
}

java {
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
	withSourcesJar()
}

jar {
	from('LICENSE') {
		rename { "${it}_${base.archivesName.get()}" }
	}
}

// Configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

//assemble.dependsOn runDatagen
